/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pl.police.communication;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import pl.police.FrontController;
import pl.police.Interfaces.gui.CallBack;
import pl.police.fascades.clientFascade.ClientFascadeImpl;
import interfaces.messages.MessageToClient;
import serializableMessage.toServer.ServerLogin;
import interfaces.messages.MessageToServer;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.Properties;
import serializableMessage.toServer.ServerAddPerson;
import serializableMessage.toServer.ServerDeletePerson;
import serializableMessage.toServer.ServerGetCases;
import serializableMessage.toServer.ServerGetPeople;
import pl.police.guiFactory.UserGuiFactory;
import pl.police.guiFactory.Workers.WorkerFactory;
import model.person.Person;
import model.person.user.User;
import pl.police.view.login.LoginOverviewController;
import pl.police.view.menu.main.MainWindowController;

public class ServerService {

    private int port;
    private String serwer;
    private static ServerService instance;
    ExecutorService executor;

    private ServerService() {
        InputStream in = null;
        try {
            Properties props = new Properties();
            in = getClass().getClassLoader().getResourceAsStream("pl/police/properties/client.properties");
            props.load(in);
            String serverName = props.getProperty("server.name");
            String serverPort = props.getProperty("server.port");
            this.port = Integer.parseInt(serverPort);
            this.serwer = serverName;
            init();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ServerService.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ServerService.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(ServerService.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public static ServerService getInstance() {
        if (instance == null) {
            instance = new ServerService();
            return instance;
        } else {
            return instance;
        }
    }

    public void init() {
        executor = Executors.newFixedThreadPool(4);
    }

    public void login(CallBack g) {
        LoginOverviewController controller = (LoginOverviewController) g;
        sendMessage(new ServerLogin(controller.getModel().getUser().getModel()), g);
    }

    public void getPeople(CallBack g) {
        User u = FrontController.getInstance().getLoginController().getModel().getUser().getModel();
        sendMessage(new ServerGetPeople().setUser(u), g);
    }

    public void addPerson(Person p) {
        User u = FrontController.getInstance().getLoginController().getModel().getUser().getModel();
        sendMessage(new ServerAddPerson().setPerson(p).setUser(u), (CallBack) FrontController.getInstance().getPeopleListController());
    }

    public void deletePerson(Person p) {
        User u = FrontController.getInstance().getLoginController().getModel().getUser().getModel();
        sendMessage(new ServerDeletePerson().setPerson(p).setUser(u), (CallBack) FrontController.getInstance().getPeopleListController());
    }

    public void getCases() {
        User u = FrontController.getInstance().getLoginController().getModel().getUser().getModel();
        sendMessage(new ServerGetCases().setUser(u), (CallBack) FrontController.getInstance().getCasesListController());
    }

    private void sendMessage(MessageToServer message, CallBack g) {
        ServerQuery worker = new ServerQuery();
        worker.setMessage(message);
        worker.setController(g);
        executor.submit(worker);
    }

    public void stop() {
        executor.shutdownNow();
    }

    class ServerQuery implements Runnable {

        private MessageToServer mess;
        private Socket mySocket;
        private CallBack g;
        private ObjectInputStream in;
        private ObjectOutputStream out;
        private MainWindowController messageBox = FrontController.getInstance().getMainWindowController();

        public ServerQuery() {
            try {
                mySocket = new Socket(serwer, port);
            } catch (IOException ex) {
                WorkerFactory wf = new WorkerFactory();
                UserGuiFactory.getInstance().createGui(wf.createAlertDialog("Server is probably down", "Connection problem", "Refused connection", null));
            }
        }

        public void setController(CallBack g) {
            this.g = g;
        }

        public void setMessage(MessageToServer mess) {
            this.mess = mess;
            messageBox.writeMessage(mess.toString());

        }

        @Override
        public void run() {
            try {
                out = new ObjectOutputStream(mySocket.getOutputStream());
                in = new ObjectInputStream(mySocket.getInputStream());
                out.writeObject(mess);
                MessageToClient m = (MessageToClient) in.readObject();
                m.executeMessage(new ClientFascadeImpl());
            } catch (IOException ex) {
                Platform.runLater(new Runnable() {
                    @Override
                    public void run() {
                        WorkerFactory wf = new WorkerFactory();
                        UserGuiFactory.getInstance().createGui(wf.createAlertDialog("Client - server communication problem", "Connection problem", "Refused connection", null));
                    }
                });
                Logger.getLogger(ServerService.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ServerService.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    in.close();
                    out.close();
                    mySocket.close();
                } catch (IOException ex) {
                    Logger.getLogger(ServerService.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

    }

}
